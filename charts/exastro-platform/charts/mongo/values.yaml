# Default values for mongo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
enabled: true

replicaCount: 1

initContainers:
  remove-data:
    image:
      repository: "docker.io/busybox"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""
    imagePullSecrets: []

  mongo:
    image:
      repository: "docker.io/mongo"
      tag: "6.0.7"
      pullPolicy: IfNotPresent

    imagePullSecrets: []

    initilize: |-
      rs.initiate({_id: 'rs0', version: 1, members: [ {_id: 0, host: 'mongo-0', priority: 1 }]})

completionCount: 1

initContainerImage:
  repository: "docker.io/busybox"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

image:
  repository: "docker.io/mongo"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "6.0"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

persistence:
  enabled: true
  reinstall: false
  accessMode: ReadWriteOnce
  size: 20Gi
  storageClass: "-" # e.g.) azurefile, local-path or - (None)
  matchLabels:
    # release: "pv-mongo"
  matchExpressions:
    # - {key: name, operator: In, values: [pv-mongo]}
  mountPath:
    dataDir: /data/db
    confDir: /etc/mongo

dbSetup:
  dbConfInfo:
    name: mongo-server-conf-config
    customCnf: |
      systemLog:
        verbosity: 0
        # destination: file
        # path: /root/logs/mongod.log
        timeStampFormat: iso8601-utc
      # storage:
      #   directoryPerDB: true
      #   dbPath: /root/data
      #   engine: wiredTiger
      #   wiredTiger:
      #     engineConfig:
      #       cacheSizeGB: 1
      #   journal:
      #     enabled: true
      # processManagement:
      #   fork: true
      # net:
      #   port: 27017
      #   bindIp: 0.0.0.0
      # security:
      #   authorization: enabled

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: true
  capabilities: {}
  privileged: false
  readOnlyRootFilesystem: false
  seLinuxOptions: {}

service:
  name: mongo
  type: ClusterIP
  port: 27017

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  secrets: []
    # - name: chart-example-tls
    #   certificate: |-
    #     -----BEGIN CERTIFICATE-----
    #     ...
    #     -----END CERTIFICATE-----
    #   key: |-
    #     -----BEGIN PRIVATE KEY-----
    #     ...
    #     -----END PRIVATE KEY-----

resources: {}
  # requests:
  #   memory: "4Gi"
  #   cpu: "4"
  # limits:
  #   memory: "8Gi"
  #   cpu: "4"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: name
          operator: In
          values:
          - mongo
      topologyKey: kubernetes.io/hostname

livenessProbe:
  tcpSocket:
    port: port-mongo
  # httpGet:
  #   path: /
  #   port: port-mongo
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3

readinessProbe:
  tcpSocket:
    port: port-mongo
  # httpGet:
  #   path: /
  #   port: port-mongo
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3