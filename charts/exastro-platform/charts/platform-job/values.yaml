# Default values for platform-job.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  pfGlobalDefinition:
    name: pf-global
    enabled: true
    image:
      registry: "docker.io"
      organization: exastro
      package: exastro-platform
    config:
      DEFAULT_LANGUAGE: "ja"
      LANGUAGE: "en"
      TZ: "Asia/Tokyo"
      PYTHONIOENCODING: utf-8
      PLATFORM_API_PROTOCOL: "http"
      PLATFORM_API_HOST: "platform-api"
      PLATFORM_API_PORT: "8000"
      PLATFORM_WEB_PROTOCOL: "http"
      PLATFORM_WEB_HOST: "platform-web"
      PLATFORM_WEB_PORT: "8000"
    secret:
      ENCRYPT_KEY: ""
  pfItaDefinition:
    name: pf-ita
    enabled: true
    config:
      ITA_WEB_PROTOCOL: "http"
      ITA_WEB_HOST: "ita-web-server"
      ITA_WEB_PORT: "8000"
      ITA_API_PROTOCOL: "http"
      ITA_API_HOST: "ita-api-organization"
      ITA_API_PORT: "8080"
      ITA_API_ADMIN_PROTOCOL: "http"
      ITA_API_ADMIN_HOST: "ita-api-admin"
      ITA_API_ADMIN_PORT: "8080"
      ITA_API_OASE_RECEIVER_PROTOCOL: "http"
      ITA_API_OASE_RECEIVER_HOST: "ita-api-oase-receiver"
      ITA_API_OASE_RECEIVER_PORT: "8000"
      ITA_API_ANSIBLE_EXECUTION_RECEIVER_PROTOCOL: "http"
      ITA_API_ANSIBLE_EXECUTION_RECEIVER_HOST: "ita-api-ansible-execution-receiver"
      ITA_API_ANSIBLE_EXECUTION_RECEIVER_PORT: "8000"
  pfDatabaseDefinition:
    name: pf-database
    enabled: true
    config:
      DB_VENDOR: "mariadb"
      DB_HOST: "mariadb"
      DB_PORT: "3306"
      DB_DATABASE: "platform"
    secret:
      DB_ADMIN_USER: "root"
      DB_ADMIN_PASSWORD: "Ch@ngeMeDBAdm"
      DB_USER: "pf-user"
      DB_PASSWORD: "Ch@ngeMePFDB"
  keycloakDefinition:
    name: keycloak
    enabled: true
    config:
      API_KEYCLOAK_PROTOCOL: "http"
      API_KEYCLOAK_HOST: "keycloak"
      API_KEYCLOAK_PORT: "8080"
      KEYCLOAK_PROTOCOL: "http"
      KEYCLOAK_HOST: "keycloak"
      KEYCLOAK_PORT: "8080"
      KEYCLOAK_MASTER_REALM: "master"
      KEYCLOAK_DB_DATABASE: "keycloak"
    secret:
      SYSTEM_ADMIN: "admin"
      SYSTEM_ADMIN_PASSWORD: "Ch@ngeMeKCAdm"
      KEYCLOAK_DB_USER: "keycloak"
      KEYCLOAK_DB_PASSWORD: "Ch@ngeMeKCADB"
  gitlabDefinition:
    name: gitlab
    enabled: true
    config:
      GITLAB_PROTOCOL: "http"
      GITLAB_HOST: "gitlab"
      GITLAB_PORT: "8080"
    secret:
      GITLAB_ROOT_PASSWORD: "Ch@ngeMeGL"
      GITLAB_ROOT_TOKEN: "change-this-token"
  mongoDefinition:
    name: mongo
    enabled: true
    config:
      MONGO_PROTOCOL: "http"
      MONGO_HOST: "mongo"
      MONGO_PORT: "27017"
    secret:
      MONGO_ADMIN_USER: "admin"
      MONGO_ADMIN_PASSWORD: "Ch@ngeMeMGAdm"

extraEnv:
  # LOG_LEVEL: "INFO"
  # SUB_PROCESS_TERMINATE_REQUEST_SECONDS: "7200"
  # SUB_PROCESS_ACCEPTABLE: "2"
  # SUB_PROCESS_MAX_JOBS: "10"
  # SUB_PROCESS_WATCH_INTERVAL_SECONDS: "1.0"
  # SUB_PROCESS_DB_RECONNECT_INTERVAL_SECONDS: "60"
  # SUB_PROCESS_DB_HEALTH_CHECK_INTERVAL_SECONDS: "5"
  # SUB_PROCESS_MAX_CANCEL_TIMEOUT: "10"
  # JOB_STATUS_WATCH_INTERVAL_SECONDS: "1.0"
  # JOB_CANCEL_TIMEOUT_SECONDS: "5.0"
  # KEYCLOAK_TOKEN_REFRESH_INTERVAL_SECONDS: "30"
  # JOB_NOTIFICATION_TIMEOUT_SECONDS: "20"
  # JOB_NOTIFICATION_TEAMS_CONNECTION_TIMEOUT: "3.0"
  # JOB_NOTIFICATION_TEAMS_READ_TIMEOUT: "10.0"
  # JOB_NOTIFICATION_SMTP_TIMEOUT: "10.0"
  # JOB_NOTIFICATION_SMTPS_SSL_VERIFY_ENABLED: "TRUE"
  # JOB_FORCE_UPDATE_STATUS_TIMEOUT_SECONDS: "60"
  # JOB_FORCE_UPDATE_STATUS_INTERVAL_SECONDS: "180"
  # JOB_FORCE_UPDATE_STATUS_PROGRASS_SECONDS: "600"
  # JOB_USER_IMPORT_TIMEOUT_SECONDS: "3600"
  # JOB_USER_IMPORT_MAX_JOB_PER_PROCESS: "2"
  # JOB_USER_IMPORT_MAX_ROWS_ALLOWD: "20000"
  # JOB_USER_IMPORT_MAX_COLS_ALLOWD: "20"
  # JOB_USER_IMPORT_WAIT_MILLISECONDS: "10"
  # JOB_USER_IMPORT_UPDATE_COUNT_INTERVAL: "100"

replicaCount: 1

initContainerImage:
  repository: "docker.io/busybox"
  tag: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

image:
  repository: ""
  tag: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

persistence:
  mountPath:
    tmp: /tmp

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

service:
  name: http
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  secrets: []
    # - name: chart-example-tls
    #   certificate: |-
    #     -----BEGIN CERTIFICATE-----
    #     ...
    #     -----END CERTIFICATE-----
    #   key: |-
    #     -----BEGIN PRIVATE KEY-----
    #     ...
    #     -----END PRIVATE KEY-----

resources: {}
  # requests:
  #   memory: "64Mi"
  #   cpu: "250m"
  # limits:
  #   memory: "64Mi"
  #   cpu: "250m"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

database:
  initContainerImage:
    repository: "docker.io/mariadb"
    tag: "10.11.4"
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  databaseCheck: |-
    #!/bin/bash
    i=10
    echo "HOST: ${DB_HOST}"
    until mysqlcheck --host=${DB_HOST} --user=${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} --silent; do
      echo `date`": Can not connect to Database."
      sleep $i
    done
    echo `date`": Completely connect to Database."
    exit 0

  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true

startupProbe:
  exec:
    command:
      - sh
      - -c
      - test "$(cat /tmp/liveness 2>/dev/null || echo 0)" -gt "$(($(date +%s) - 5))"
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 30

livenessProbe:
  exec:
    command:
      - sh
      - -c
      - test "$(cat /tmp/liveness 2>/dev/null || echo 0)" -gt "$(($(date +%s) - 5))"
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3