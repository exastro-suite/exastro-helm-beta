# Default values for keycloak.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  proxyDefinition:
    name: proxy-global
    enabled: false
    config:
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: "127.0.0.1,localhost,platform-auth,platform-api"

enabled: true

replicaCount: 1

initContainerImage:
  repository: "docker.io/mariadb"
  tag: "10.11.4"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

livenessCheck: |-
  #!/bin/bash
  i=10
  echo "HOST: ${DB_HOST}"
  until mysqlcheck --host=${DB_HOST} --user=${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} --silent; do
    echo `date`": Can not connect to Database."
    sleep $i
  done
  echo `date`": Completely connect to Database."
  exit 0

image:
  repository: "docker.io/exastro/keycloak"
  tag: ""
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

extraEnv:
  # If you use Azure MySQL, add options like below
  # KC_DB_URL_PROPERTIES: "?useSSL=false"

extraJavaOpts: "-Xms256m -Xmx256m"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

persistence: {}

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

service:
  name: http
  type: ClusterIP
  port: 8080
  jgroupsName: jgroups
  jgroupsPort: 7600

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  secrets: []
    # - name: chart-example-tls
    #   certificate: |-
    #     -----BEGIN CERTIFICATE-----
    #     ...
    #     -----END CERTIFICATE-----
    #   key: |-
    #     -----BEGIN PRIVATE KEY-----
    #     ...
    #     -----END PRIVATE KEY-----

resources: {}
  # requests:
  #   memory: "256Mi"
  #   cpu: "1m"
  # limits:
  #   memory: "2Gi"
  #   cpu: "4"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - keycloak
      topologyKey: kubernetes.io/hostname

keycloakConfig:
  startupSh: |
    #/bin/bash
    echo "#----------------------------------------------------------------------------"
    echo "# build --cache=ispn"
    echo "#----------------------------------------------------------------------------"
    ${HOME}/bin/kc.sh build --cache=ispn
    echo "#----------------------------------------------------------------------------"
    echo "# build --cache-config-file=cache-ispn-exastro-platform.xml"
    echo "#----------------------------------------------------------------------------"
    ${HOME}/bin/kc.sh build --cache-config-file=cache-ispn-exastro-platform.xml

    echo "#----------------------------------------------------------------------------"
    echo "# build --cache-stack=kubernetes"
    echo "#----------------------------------------------------------------------------"
    ${HOME}/bin/kc.sh build --cache-stack=kubernetes

    echo "#----------------------------------------------------------------------------"
    echo "# start --optimized"
    echo "#----------------------------------------------------------------------------"
    ${HOME}/bin/kc.sh start --optimized

  cacheIspnXml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      ~ Copyright 2019 Red Hat, Inc. and/or its affiliates
      ~ and other contributors as indicated by the @author tags.
      ~
      ~ Licensed under the Apache License, Version 2.0 (the "License");
      ~ you may not use this file except in compliance with the License.
      ~ You may obtain a copy of the License at
      ~
      ~ http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->

    <replicated-cache segments="256"
                      mode="SYNC"
                      statistics="true">
      <encoding media-type="application/x-protostream"/>
      <locking isolation="REPEATABLE_READ"/>
      <transaction mode="FULL_XA"
                  locking="OPTIMISTIC"/>
      <expiration lifespan="5000"
                  max-idle="1000" />
      <memory max-count="1000000"
              when-full="REMOVE"/>
      <indexing enabled="true"
                storage="local-heap">
        <index-reader refresh-interval="1000"/>
        <indexed-entities>
          <indexed-entity>org.infinispan.Person</indexed-entity>
        </indexed-entities>
      </indexing>
      <partition-handling when-split="ALLOW_READ_WRITES"
                          merge-policy="PREFERRED_NON_NULL"/>
      <persistence passivation="false">
        <!-- Persistent storage configuration. -->
      </persistence>
    </replicated-cache>
