apiVersion: v1
kind: Pod
metadata:
  name: {{ template "ita-migration.podname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ita-migration.labels" . | nindent 4 }}
spec:
  {{- with .Values.database.imagePullSecrets }}
  imagePullSecrets:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  serviceAccountName: {{ include "ita-migration.serviceAccountName" . }}
  securityContext:
    {{- toYaml .Values.podSecurityContext | nindent 4 }}
  initContainers:
    - name: remove-data
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag | default "latest" }}"
      imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
      command: ["sh", "-c"]
      args:
        - |
          {{- if .Values.global.itaGlobalDefinition.persistence.reinstall }}
          echo "Removing data for Exastro IT Automation persistence..."
          rm -rf {{ .Values.global.itaGlobalDefinition.config.STORAGEPATH }}/*
          {{- else }}
          echo "Leave data for Exastro IT Automation persistence."
          {{- end }}
      volumeMounts:
        - name: volume-{{ template "ita-migration.name" . }}-storage
          mountPath: {{ .Values.global.itaGlobalDefinition.config.STORAGEPATH }}
    - name: setup-storage
      command: ["sh", "-c"]
      args:
        - |
          chown {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} {{ .Values.volumeMounts.mountPath.storage }}/ || true"
          chown {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }} {{ .Values.volumeMounts.mountPath.storage }}/* || true"
      image: {{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag | default "latest" }}
      imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
      volumeMounts:
        - name: volume-{{ template "ita-migration.name" . }}-storage
          mountPath: {{ .Values.volumeMounts.mountPath.storage }}
    - name: database-alive-check
      securityContext:
        {{- toYaml .Values.database.securityContext | nindent 8 }}
      image: "{{ .Values.database.initContainerImage.repository }}:{{ .Values.database.initContainerImage.tag | default "latest" }}"
      imagePullPolicy: {{ .Values.database.initContainerImage.pullPolicy }}
      command: ["sh", "-c"]
      args:
        - |
          {{- .Values.database.livenessCheck | nindent 10 }}
      env:
        {{- range $define := .Values.global -}}
        {{-   range $config, $value := $define.config }}
        {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: ita-params-{{ $define.name }}
              key: {{ $config }}
        {{-     end -}}
        {{-   end -}}
        {{-   range $secret, $value := $define.secret }}
        {{-     if or (eq $define.name "ita-database") }}
        - name: {{ $secret }}
          valueFrom:
            secretKeyRef:
              name: ita-secret-{{ $define.name }}
              key: {{ $secret }}
        {{-     end }}
        {{-   end }}
        {{- end -}}
        {{ range $config, $value := .Values.extraEnv }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: params-{{ template "ita-migration.name" $ }}
              key: {{ $config }}
        {{- end }}
    - name: platform-alive-check
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag | default "latest" }}"
      imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
      command: ["sh", "-c"]
      args:
        - |
          {{- .Values.platform.livenessCheck | nindent 10 }}
      env:
        {{- range $define := .Values.global -}}
        {{-   range $config, $value := $define.config }}
        {{-     if or (eq $define.name "ita-global") (eq $define.name "ita-database") (eq $define.name "mongo") }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: ita-params-{{ $define.name }}
              key: {{ $config }}
        {{-     end -}}
        {{-   end -}}
        {{-   range $secret, $value := $define.secret }}
        {{-     if or (eq $define.name "ita-database") (eq $define.name "mongo") }}
        - name: {{ $secret }}
          valueFrom:
            secretKeyRef:
              name: ita-secret-{{ $define.name }}
              key: {{ $secret }}
        {{-     end }}
        {{-   end }}
        {{- end -}}
        {{ range $config, $value := .Values.extraEnv }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: params-{{ template "ita-migration.name" $ }}
              key: {{ $config }}
        {{- end }}
  containers:
    - name: {{ template "ita-migration.name" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      image: "{{ template "ita-migration.repository" . }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
      imagePullPolicy: {{ .Values.image.pullPolicy }}
      command: ["sh", "-c"]
      args:
        - |
          {{- .Values.command.migrationMain | nindent 10 }}
      env:
        {{- range $define := .Values.global -}}
        {{-   range $config, $value := $define.config }}
        {{-     if or (eq $define.name "ita-global") (eq $define.name "gitlab") (eq $define.name "ita-database") }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: ita-params-{{ $define.name }}
              key: {{ $config }}
        {{-     end -}}
        {{-   end -}}
        {{-   range $secret, $value := $define.secret }}
        {{-     if or (eq $define.name "ita-global") (eq $define.name "gitlab") (eq $define.name "ita-database") }}
        - name: {{ $secret }}
          valueFrom:
            secretKeyRef:
              name: ita-secret-{{ $define.name }}
              key: {{ $secret }}
        {{-     end }}
        {{-   end }}
        {{- end -}}
        {{ range $config, $value := .Values.extraEnv }}
        - name: {{ $config }}
          valueFrom:
            configMapKeyRef:
              name: params-{{ template "ita-migration.name" $ }}
              key: {{ $config }}
        {{- end }}
      volumeMounts:
        - name: volume-{{ template "ita-migration.name" . }}-storage
          mountPath: {{ .Values.volumeMounts.mountPath.storage }}
        - name: volume-{{ template "ita-migration.name" . }}-tmp
          mountPath: {{ .Values.volumeMounts.mountPath.tmp }}
  restartPolicy: OnFailure
  volumes:
    - name: volume-{{ template "ita-migration.name" . }}-storage
      {{- if and .Values.global.itaGlobalDefinition.persistence.enabled }}
      persistentVolumeClaim:
        claimName: pvc-{{ .Values.global.itaGlobalDefinition.name }}
      {{- else }}
      emptyDir: {}
      {{- end }}
    - name: volume-{{ template "ita-migration.name" . }}-tmp
      emptyDir: {}
